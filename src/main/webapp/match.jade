-import de.fuberlin.wiwiss.silk.entity.Entity
-import de.fuberlin.wiwiss.silk.linkagerule.similarity.DistanceMeasure

-@ val res: MatchingResults
-@ val measures: List[(String, DistanceMeasure)]
-@ val sourceEntities: List[Entity]
-@ val targetEntities: List[Entity]
-@ val source: Entity
-@ val exact: List[Edge]
-@ val accepted: List[Edge]
-@ val approx: List[Edge]
-@ val nomatches: List[Edge]

-@ val sourceId: Int
-@ val threshold: Double
-@ val skipExact: Boolean

a(href={"/match/" + (sourceId - 1)}) back
a(href={"/match/" + (sourceId + 1)}) next

:!javascript
  val sourceId = #{sourceId};
  val sourceLabel = "#{source.values.flatten.mkString(", ")}";


h1 Matching #{source.uri}

p
  | Values: #{source.values.flatten.mkString(", ")}
  br
  | DBpedia Redirect:
  span(id="redirect")

ul
  li
    | Exact: #{exact.size}
    ul
      - for (m <- exact)
        li
          - val sims = for ((d, i) <- m.sim.sortBy(_._1)) yield f"${measures(i)._1}: ${"%1.2f" format d}"
          | #{targetEntities(m.to).values.flatten.mkString(", ")} (#{sims.mkString(", ")})
          a(href="#" onclick={"acceptMatch(" + m.from + ", " + m.to + ")"}) accept

          a(href={targetEntities(m.to).uri}) #{targetEntities(m.to).uri}

  li
    | Accepted: #{accepted.size}
    ul
      - for (m <- accepted)
        li
          - val sims = for ((d, i) <- m.sim.sortBy(_._1)) yield f"${measures(i)._1}: ${"%1.2f" format d}"
          | #{targetEntities(m.to).values.flatten.mkString(", ")} (#{sims.mkString(", ")})
          a(href="#" onclick={"removeMatch(" + m.from + ", " + m.to + ")"}) remove

          a(href={targetEntities(m.to).uri}) #{targetEntities(m.to).uri}

  li
    | Approx: #{approx.size}
    ul
      - for (m <- approx)
        li
          - val sims = for ((d, i) <- m.sim.sortBy(_._1)) yield f"${measures(i)._1}: ${"%1.2f" format d}"
          | #{targetEntities(m.to).values.flatten.mkString(", ")} (#{sims.mkString(", ")})
          a(href="#" onclick={"acceptMatch(" + m.from + ", " + m.to + ")"}) accept

          a(href={targetEntities(m.to).uri}) #{targetEntities(m.to).uri}


